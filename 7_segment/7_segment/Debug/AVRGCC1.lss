
AVRGCC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  0000010c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000090  00000000  00000000  000007d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000001b  00000000  00000000  00000888  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000016e  00000000  00000000  000008a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000106  00000000  00000000  00000a11  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000214  00000000  00000000  00000b17  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000020  00000000  00000000  00000d2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000fb  00000000  00000000  00000d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004c  00000000  00000000  00000e47  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000038  00000000  00000000  00000e93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>         /* Clock is 1Mhz by Default */

int main(void)
{
	 char num = 0;
	DDRA  = DDRA & (~(1<<PA0)); // configure pin 4 of PORTD to be input pin
  6c:	d0 98       	cbi	0x1a, 0	; 26
	DDRC |= 0x0F; // configure all pins of PORTC as output pins
  6e:	84 b3       	in	r24, 0x14	; 20
  70:	8f 60       	ori	r24, 0x0F	; 15
  72:	84 bb       	out	0x14, r24	; 20
	
	// initialize the 7-segment
	
	PORTC=0;
  74:	15 ba       	out	0x15, r1	; 21
#include <avr/io.h>
#include <util/delay.h>         /* Clock is 1Mhz by Default */

int main(void)
{
	 char num = 0;
  76:	80 e0       	ldi	r24, 0x00	; 0
			if( PINA & (1<<PA0) )
			{
				if((PORTC & 0x0F) == 9)
				{
					// if overflow occurs
					num = 0;
  78:	30 e0       	ldi	r19, 0x00	; 0
	
	PORTC=0;
    while(1)
    {
		// check if the push button is pressed or not
		if( PINA & (1<<PA0) )
  7a:	c8 9b       	sbis	0x19, 0	; 25
  7c:	fe cf       	rjmp	.-4      	; 0x7a <main+0xe>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7e:	eb e4       	ldi	r30, 0x4B	; 75
  80:	fd e1       	ldi	r31, 0x1D	; 29
  82:	31 97       	sbiw	r30, 0x01	; 1
  84:	f1 f7       	brne	.-4      	; 0x82 <main+0x16>
  86:	00 c0       	rjmp	.+0      	; 0x88 <main+0x1c>
  88:	00 00       	nop
		{
			_delay_ms(30);
			//second check due to switch bouncing
			if( PINA & (1<<PA0) )
  8a:	c8 9b       	sbis	0x19, 0	; 25
  8c:	10 c0       	rjmp	.+32     	; 0xae <main+0x42>
			{
				if((PORTC & 0x0F) == 9)
  8e:	95 b3       	in	r25, 0x15	; 21
  90:	9f 70       	andi	r25, 0x0F	; 15
  92:	99 30       	cpi	r25, 0x09	; 9
  94:	29 f4       	brne	.+10     	; 0xa0 <main+0x34>
				{
					// if overflow occurs
					num = 0;
					PORTC = (PORTC & 0xF0) | (num & 0x0F);
  96:	85 b3       	in	r24, 0x15	; 21
  98:	80 7f       	andi	r24, 0xF0	; 240
  9a:	85 bb       	out	0x15, r24	; 21
			if( PINA & (1<<PA0) )
			{
				if((PORTC & 0x0F) == 9)
				{
					// if overflow occurs
					num = 0;
  9c:	83 2f       	mov	r24, r19
  9e:	07 c0       	rjmp	.+14     	; 0xae <main+0x42>
					PORTC = (PORTC & 0xF0) | (num & 0x0F);
				}
				else
				{
					// increment 7-segment every press
					num++;
  a0:	8f 5f       	subi	r24, 0xFF	; 255
					PORTC = (PORTC & 0xF0) | (num & 0x0F);
  a2:	95 b3       	in	r25, 0x15	; 21
  a4:	28 2f       	mov	r18, r24
  a6:	2f 70       	andi	r18, 0x0F	; 15
  a8:	90 7f       	andi	r25, 0xF0	; 240
  aa:	92 2b       	or	r25, r18
  ac:	95 bb       	out	0x15, r25	; 21
				}
			}
			while( PINA & (1<<PA0) ){} // wait until switch is released
  ae:	c8 99       	sbic	0x19, 0	; 25
  b0:	fe cf       	rjmp	.-4      	; 0xae <main+0x42>
  b2:	e3 cf       	rjmp	.-58     	; 0x7a <main+0xe>

000000b4 <_exit>:
  b4:	f8 94       	cli

000000b6 <__stop_program>:
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <__stop_program>
