
external interrupt 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000118  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000090  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000874  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000003a  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000ac  00000000  00000000  000008ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000063  00000000  00000000  0000097a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000174  00000000  00000000  000009dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  00000b54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000d3  00000000  00000000  00000b94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 0000001e  00000000  00000000  00000c67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_18>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_18>:
//including interrupts header file
#include <avr/interrupt.h>

//interrupt service routine
ISR(INT2_vect)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
	if (PORTC == 9)  //clearing when reaches 9
  78:	85 b3       	in	r24, 0x15	; 21
  7a:	89 30       	cpi	r24, 0x09	; 9
  7c:	11 f4       	brne	.+4      	; 0x82 <__vector_18+0x16>
	{
		PORTC = 0;
  7e:	15 ba       	out	0x15, r1	; 21
  80:	03 c0       	rjmp	.+6      	; 0x88 <__vector_18+0x1c>
	}
	else
	    PORTC ++;  //increasing the seven segment by one
  82:	85 b3       	in	r24, 0x15	; 21
  84:	8f 5f       	subi	r24, 0xFF	; 255
  86:	85 bb       	out	0x15, r24	; 21
	
}
  88:	8f 91       	pop	r24
  8a:	0f 90       	pop	r0
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	0f 90       	pop	r0
  90:	1f 90       	pop	r1
  92:	18 95       	reti

00000094 <INT2_intit>:

//configuration function
void INT2_intit(void)
{
	SREG &= (~(1<<7));     //disables global interrupts
  94:	8f b7       	in	r24, 0x3f	; 63
  96:	8f 77       	andi	r24, 0x7F	; 127
  98:	8f bf       	out	0x3f, r24	; 63
	GICR |= (1<<INT2);     //enables INT2 source
  9a:	8b b7       	in	r24, 0x3b	; 59
  9c:	80 62       	ori	r24, 0x20	; 32
  9e:	8b bf       	out	0x3b, r24	; 59
	DDRB &= (~(1<<PB2));   //the source pin as input
  a0:	ba 98       	cbi	0x17, 2	; 23
	MCUCSR &= (~(1<<ISC2));  //the action is falling edge
  a2:	84 b7       	in	r24, 0x34	; 52
  a4:	8f 7b       	andi	r24, 0xBF	; 191
  a6:	84 bf       	out	0x34, r24	; 52
	SREG |= (1<<7);          //enables global interrupts       
  a8:	8f b7       	in	r24, 0x3f	; 63
  aa:	80 68       	ori	r24, 0x80	; 128
  ac:	8f bf       	out	0x3f, r24	; 63
}
  ae:	08 95       	ret

000000b0 <main>:

int main(void)
{
	//registers direction & initial values
	DDRC |= ((1<<PC0) | (1<<PC1) | (1<<PC2) | (1<<PC3)); //first four bits to 7 segment
  b0:	84 b3       	in	r24, 0x14	; 20
  b2:	8f 60       	ori	r24, 0x0F	; 15
  b4:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
  b6:	15 ba       	out	0x15, r1	; 21
	
	//calling the interrupt function
	INT2_intit(); 
  b8:	0e 94 4a 00 	call	0x94	; 0x94 <INT2_intit>
  bc:	ff cf       	rjmp	.-2      	; 0xbc <main+0xc>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
