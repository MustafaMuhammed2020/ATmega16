
external interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000138  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000090  00000000  00000000  00000804  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000038  00000000  00000000  000008b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000184  00000000  00000000  000008ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000121  00000000  00000000  00000a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000227  00000000  00000000  00000b91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  00000db8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000131  00000000  00000000  00000df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000038  00000000  00000000  00000f29  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  64:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_1>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

ISR(INT0_vect)                   // External INT0 Interrupt Service Routine
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	3f 93       	push	r19
  7a:	4f 93       	push	r20
  7c:	5f 93       	push	r21
  7e:	8f 93       	push	r24
  80:	9f 93       	push	r25
	PORTC = PORTC ^ (1<<PC0);   //toggle led state
  82:	95 b3       	in	r25, 0x15	; 21
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	98 27       	eor	r25, r24
  88:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	2f e9       	ldi	r18, 0x9F	; 159
  8c:	36 e8       	ldi	r19, 0x86	; 134
  8e:	41 e0       	ldi	r20, 0x01	; 1
  90:	21 50       	subi	r18, 0x01	; 1
  92:	30 40       	sbci	r19, 0x00	; 0
  94:	40 40       	sbci	r20, 0x00	; 0
  96:	e1 f7       	brne	.-8      	; 0x90 <__vector_1+0x24>
  98:	00 c0       	rjmp	.+0      	; 0x9a <__vector_1+0x2e>
  9a:	00 00       	nop
	_delay_ms(500);
	PORTC = PORTC ^ (1<<PC0); 
  9c:	95 b3       	in	r25, 0x15	; 21
  9e:	89 27       	eor	r24, r25
  a0:	85 bb       	out	0x15, r24	; 21
}
  a2:	9f 91       	pop	r25
  a4:	8f 91       	pop	r24
  a6:	5f 91       	pop	r21
  a8:	4f 91       	pop	r20
  aa:	3f 91       	pop	r19
  ac:	2f 91       	pop	r18
  ae:	0f 90       	pop	r0
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	0f 90       	pop	r0
  b4:	1f 90       	pop	r1
  b6:	18 95       	reti

000000b8 <INT0_Init>:

void INT0_Init(void)           //External INT0 enable and configuration function
{
	SREG  &= ~(1<<7);                   // Disable interrupts by clearing I-bit
  b8:	8f b7       	in	r24, 0x3f	; 63
  ba:	8f 77       	andi	r24, 0x7F	; 127
  bc:	8f bf       	out	0x3f, r24	; 63
	DDRD  &= (~(1<<PD2));               // Configure INT0/PD2 as input pin
  be:	8a 98       	cbi	0x11, 2	; 17
	GICR  |= (1<<INT0);                 // Enable external interrupt pin INT0
  c0:	8b b7       	in	r24, 0x3b	; 59
  c2:	80 64       	ori	r24, 0x40	; 64
  c4:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1<<ISC00) | (1<<ISC01);   // Trigger INT0 with the raising edge
  c6:	85 b7       	in	r24, 0x35	; 53
  c8:	83 60       	ori	r24, 0x03	; 3
  ca:	85 bf       	out	0x35, r24	; 53
	SREG  |= (1<<7);                    // Enable interrupts by setting I-bit
  cc:	8f b7       	in	r24, 0x3f	; 63
  ce:	80 68       	ori	r24, 0x80	; 128
  d0:	8f bf       	out	0x3f, r24	; 63
}
  d2:	08 95       	ret

000000d4 <main>:

int main(void)
{
	INT0_Init();              // Enable external INT0
  d4:	0e 94 5c 00 	call	0xb8	; 0xb8 <INT0_Init>

	DDRC  = DDRC | (1<<PC0);  // Configure pin PC0 in PORTC as output pin
  d8:	a0 9a       	sbi	0x14, 0	; 20
	PORTC = PORTC & (~(1<<PC0)); // Initialization Led is off at the beginning(Negative Logic)
  da:	a8 98       	cbi	0x15, 0	; 21
  dc:	ff cf       	rjmp	.-2      	; 0xdc <main+0x8>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
