
led_patterns.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  000001d0  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  0000092c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000049  00000000  00000000  0000094c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000028c  00000000  00000000  00000995  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000012e  00000000  00000000  00000c21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ce  00000000  00000000  00000d4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  00001020  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000122  00000000  00000000  00001080  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000038  00000000  00000000  000011a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 a0 00 	call	0x140	; 0x140 <main>
  74:	0c 94 ac 00 	jmp	0x158	; 0x158 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <patt1>:
#include <util/delay.h>
unsigned char i;

void patt1(void)
{
	PORTA=0x01;
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	8b bb       	out	0x1b, r24	; 27
	for (i=0;i<8;i++)
  80:	10 92 60 00 	sts	0x0060, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	8f e9       	ldi	r24, 0x9F	; 159
  86:	96 e8       	ldi	r25, 0x86	; 134
  88:	a1 e0       	ldi	r26, 0x01	; 1
  8a:	81 50       	subi	r24, 0x01	; 1
  8c:	90 40       	sbci	r25, 0x00	; 0
  8e:	a0 40       	sbci	r26, 0x00	; 0
  90:	e1 f7       	brne	.-8      	; 0x8a <patt1+0xe>
  92:	00 c0       	rjmp	.+0      	; 0x94 <patt1+0x18>
  94:	00 00       	nop
	{
		_delay_ms(500);
		PORTA=(PORTA<<1);
  96:	8b b3       	in	r24, 0x1b	; 27
  98:	88 0f       	add	r24, r24
  9a:	8b bb       	out	0x1b, r24	; 27
unsigned char i;

void patt1(void)
{
	PORTA=0x01;
	for (i=0;i<8;i++)
  9c:	80 91 60 00 	lds	r24, 0x0060
  a0:	8f 5f       	subi	r24, 0xFF	; 255
  a2:	80 93 60 00 	sts	0x0060, r24
  a6:	88 30       	cpi	r24, 0x08	; 8
  a8:	68 f3       	brcs	.-38     	; 0x84 <patt1+0x8>
	{
		_delay_ms(500);
		PORTA=(PORTA<<1);
	}
}
  aa:	08 95       	ret

000000ac <patt2>:

void patt2(void)
{
	PORTA=0x80;
  ac:	80 e8       	ldi	r24, 0x80	; 128
  ae:	8b bb       	out	0x1b, r24	; 27
	for (i=0;i<8;i++)
  b0:	10 92 60 00 	sts	0x0060, r1
  b4:	8f e9       	ldi	r24, 0x9F	; 159
  b6:	96 e8       	ldi	r25, 0x86	; 134
  b8:	a1 e0       	ldi	r26, 0x01	; 1
  ba:	81 50       	subi	r24, 0x01	; 1
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	a0 40       	sbci	r26, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <patt2+0xe>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <patt2+0x18>
  c4:	00 00       	nop
	{
		_delay_ms(500);
		PORTA=(PORTA>>1);
  c6:	8b b3       	in	r24, 0x1b	; 27
  c8:	86 95       	lsr	r24
  ca:	8b bb       	out	0x1b, r24	; 27
}

void patt2(void)
{
	PORTA=0x80;
	for (i=0;i<8;i++)
  cc:	80 91 60 00 	lds	r24, 0x0060
  d0:	8f 5f       	subi	r24, 0xFF	; 255
  d2:	80 93 60 00 	sts	0x0060, r24
  d6:	88 30       	cpi	r24, 0x08	; 8
  d8:	68 f3       	brcs	.-38     	; 0xb4 <patt2+0x8>
	{
		_delay_ms(500);
		PORTA=(PORTA>>1);
	}
}
  da:	08 95       	ret

000000dc <patt3>:

void patt3(void)
{
	PORTA=0x01;
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	8b bb       	out	0x1b, r24	; 27
	for (i=0;i<8;i++)
  e0:	10 92 60 00 	sts	0x0060, r1
  e4:	8f e9       	ldi	r24, 0x9F	; 159
  e6:	96 e8       	ldi	r25, 0x86	; 134
  e8:	a1 e0       	ldi	r26, 0x01	; 1
  ea:	81 50       	subi	r24, 0x01	; 1
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	a0 40       	sbci	r26, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <patt3+0xe>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <patt3+0x18>
  f4:	00 00       	nop
	{
		_delay_ms(500);
		PORTA = PORTA | (PORTA<<1);
  f6:	9b b3       	in	r25, 0x1b	; 27
  f8:	8b b3       	in	r24, 0x1b	; 27
  fa:	88 0f       	add	r24, r24
  fc:	89 2b       	or	r24, r25
  fe:	8b bb       	out	0x1b, r24	; 27
}

void patt3(void)
{
	PORTA=0x01;
	for (i=0;i<8;i++)
 100:	80 91 60 00 	lds	r24, 0x0060
 104:	8f 5f       	subi	r24, 0xFF	; 255
 106:	80 93 60 00 	sts	0x0060, r24
 10a:	88 30       	cpi	r24, 0x08	; 8
 10c:	58 f3       	brcs	.-42     	; 0xe4 <patt3+0x8>
	{
		_delay_ms(500);
		PORTA = PORTA | (PORTA<<1);
		
	}			
}
 10e:	08 95       	ret

00000110 <patt4>:

void patt4(void)
{
	PORTA=0xff;
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	8b bb       	out	0x1b, r24	; 27
	for (i=0;i<8;i++)
 114:	10 92 60 00 	sts	0x0060, r1
 118:	8f e9       	ldi	r24, 0x9F	; 159
 11a:	96 e8       	ldi	r25, 0x86	; 134
 11c:	a1 e0       	ldi	r26, 0x01	; 1
 11e:	81 50       	subi	r24, 0x01	; 1
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	a0 40       	sbci	r26, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <patt4+0xe>
 126:	00 c0       	rjmp	.+0      	; 0x128 <patt4+0x18>
 128:	00 00       	nop
	{
		_delay_ms(500);
		PORTA=(PORTA>>1);
 12a:	8b b3       	in	r24, 0x1b	; 27
 12c:	86 95       	lsr	r24
 12e:	8b bb       	out	0x1b, r24	; 27
}

void patt4(void)
{
	PORTA=0xff;
	for (i=0;i<8;i++)
 130:	80 91 60 00 	lds	r24, 0x0060
 134:	8f 5f       	subi	r24, 0xFF	; 255
 136:	80 93 60 00 	sts	0x0060, r24
 13a:	88 30       	cpi	r24, 0x08	; 8
 13c:	68 f3       	brcs	.-38     	; 0x118 <patt4+0x8>
	{
		_delay_ms(500);
		PORTA=(PORTA>>1);
	}
}
 13e:	08 95       	ret

00000140 <main>:

int main(void)
{
	DDRA=0xff;
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	8a bb       	out	0x1a, r24	; 26
	PORTA=0x00;
 144:	1b ba       	out	0x1b, r1	; 27
	
    while(1)
    {
        patt1();
 146:	0e 94 3e 00 	call	0x7c	; 0x7c <patt1>
		patt2();
 14a:	0e 94 56 00 	call	0xac	; 0xac <patt2>
		patt3();
 14e:	0e 94 6e 00 	call	0xdc	; 0xdc <patt3>
		patt4(); 
 152:	0e 94 88 00 	call	0x110	; 0x110 <patt4>
 156:	f7 cf       	rjmp	.-18     	; 0x146 <main+0x6>

00000158 <_exit>:
 158:	f8 94       	cli

0000015a <__stop_program>:
 15a:	ff cf       	rjmp	.-2      	; 0x15a <__stop_program>
