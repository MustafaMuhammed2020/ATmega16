
7_seg_with_timer1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  00000152  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000004a  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000cb  00000000  00000000  0000091a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000085  00000000  00000000  000009e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000181  00000000  00000000  00000a6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000040  00000000  00000000  00000bec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000de  00000000  00000000  00000c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000001e  00000000  00000000  00000d0a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_4>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  74:	0c 94 6d 00 	jmp	0xda	; 0xda <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_4>:
//global variable for counting overflows
unsigned char no_of_ovs =0;

//ISR of timer1
ISR(TIMER2_OVF_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
	no_of_ovs++;   
  88:	80 91 60 00 	lds	r24, 0x0060
  8c:	8f 5f       	subi	r24, 0xFF	; 255
  8e:	80 93 60 00 	sts	0x0060, r24
	if (no_of_ovs == 123)  //at 123 time is 1 sec
  92:	8b 37       	cpi	r24, 0x7B	; 123
  94:	51 f4       	brne	.+20     	; 0xaa <__vector_4+0x2e>
	{
		if (PORTC == 9)
  96:	85 b3       	in	r24, 0x15	; 21
  98:	89 30       	cpi	r24, 0x09	; 9
  9a:	11 f4       	brne	.+4      	; 0xa0 <__vector_4+0x24>
		{
			PORTC = 0;
  9c:	15 ba       	out	0x15, r1	; 21
  9e:	03 c0       	rjmp	.+6      	; 0xa6 <__vector_4+0x2a>
		}
		else
		{
			PORTC++;  //increasing the 7-seg with one
  a0:	85 b3       	in	r24, 0x15	; 21
  a2:	8f 5f       	subi	r24, 0xFF	; 255
  a4:	85 bb       	out	0x15, r24	; 21
		}
		no_of_ovs = 0; //clearing no_of_ovs for new cycle
  a6:	10 92 60 00 	sts	0x0060, r1
	}
}
  aa:	8f 91       	pop	r24
  ac:	0f 90       	pop	r0
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	0f 90       	pop	r0
  b2:	1f 90       	pop	r1
  b4:	18 95       	reti

000000b6 <timer2_config>:

//configuration function of timer1
void timer2_config (void)
{
	TCCR2 |= ((1<<FOC0) | (1<<CS02));  //normal mode with FCPU/256 prescaller
  b6:	85 b5       	in	r24, 0x25	; 37
  b8:	84 68       	ori	r24, 0x84	; 132
  ba:	85 bd       	out	0x25, r24	; 37
	TCNT2 = 0;             //the initial value is 0
  bc:	14 bc       	out	0x24, r1	; 36
	TIMSK |= (1<<TOIE2);  //enables timer2 interrupt
  be:	89 b7       	in	r24, 0x39	; 57
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	89 bf       	out	0x39, r24	; 57
} 
  c4:	08 95       	ret

000000c6 <main>:

int main(void)
{
	//registers directions and initial values
	DDRC |= ((1<<PC0) | (1<<PC1) | (1<<PC2) | (1<<PC3)); //four pins to 7-seg
  c6:	84 b3       	in	r24, 0x14	; 20
  c8:	8f 60       	ori	r24, 0x0F	; 15
  ca:	84 bb       	out	0x14, r24	; 20
	PORTC &= (~((1<<PC0) | (1<<PC1) | (1<<PC2) | (1<<PC3)));  //the initial value is 0
  cc:	85 b3       	in	r24, 0x15	; 21
  ce:	80 7f       	andi	r24, 0xF0	; 240
  d0:	85 bb       	out	0x15, r24	; 21
	
	//enable global interrupts
	sei();
  d2:	78 94       	sei
	
	//timer2 start
	timer2_config();
  d4:	0e 94 5b 00 	call	0xb6	; 0xb6 <timer2_config>
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <main+0x12>

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>
