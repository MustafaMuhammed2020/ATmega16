
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000120  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000090  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000002a  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000a9  00000000  00000000  000008c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000074  00000000  00000000  0000096f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000203  00000000  00000000  000009e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000030  00000000  00000000  00000be8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000a5  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 0000001e  00000000  00000000  00000cbd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3c 00 	call	0x78	; 0x78 <main>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <PWM_config>:
{
	/*PWM mode
	 *FCPU/8 prescaller
	 *non inverting mode
	 */
	TCCR0 |= ((1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01));
  6c:	93 b7       	in	r25, 0x33	; 51
  6e:	9a 66       	ori	r25, 0x6A	; 106
  70:	93 bf       	out	0x33, r25	; 51
	TCNT0 =0;  //initial value
  72:	12 be       	out	0x32, r1	; 50
	OCR0 = speed; //the input value
  74:	8c bf       	out	0x3c, r24	; 60
	
	
}
  76:	08 95       	ret

00000078 <main>:

int main(void)
{
	//registers directions and initial value
	DDRD &= (~(1<<PD0)); //first three pins are inputs "switches"
  78:	88 98       	cbi	0x11, 0	; 17
	DDRD &= (~(1<<PD1)); 
  7a:	89 98       	cbi	0x11, 1	; 17
	DDRD &= (~(1<<PD2)); 
  7c:	8a 98       	cbi	0x11, 2	; 17
	
	DDRA |= (1<<PA0);   //first three pins are outputs "leds"
  7e:	d0 9a       	sbi	0x1a, 0	; 26
	DDRA |= (1<<PA1);
  80:	d1 9a       	sbi	0x1a, 1	; 26
	DDRA |= (1<<PA2);
  82:	d2 9a       	sbi	0x1a, 2	; 26
	
	DDRB |= (1<<PB1);  //enable and motor pins
  84:	b9 9a       	sbi	0x17, 1	; 23
	DDRB |= (1<<PB2);
  86:	ba 9a       	sbi	0x17, 2	; 23
	DDRB |= (1<<PB3);
  88:	bb 9a       	sbi	0x17, 3	; 23
	
	PORTA =0;         //leds are off
  8a:	1b ba       	out	0x1b, r1	; 27
	PORTB |= (1<<PB1); //motor is stopped
  8c:	c1 9a       	sbi	0x18, 1	; 24
	PORTB |= (1<<PB2);
  8e:	c2 9a       	sbi	0x18, 2	; 24
	
	
    while(1)
    {
		//test cases of motor speed
		if ((PIND & (1<<slow)))
  90:	80 9b       	sbis	0x10, 0	; 16
  92:	07 c0       	rjmp	.+14     	; 0xa2 <main+0x2a>
		{
			PORTA =0; 
  94:	1b ba       	out	0x1b, r1	; 27
			PWM_config(64);     //25% duty cycle7
  96:	80 e4       	ldi	r24, 0x40	; 64
  98:	0e 94 36 00 	call	0x6c	; 0x6c <PWM_config>
			PORTB |= (1<<PB1); //motor is on
  9c:	c1 9a       	sbi	0x18, 1	; 24
	        PORTB &= (~(1<<PB2));
  9e:	c2 98       	cbi	0x18, 2	; 24
			PORTA |= (1<<PA1);  //illuminate yellow led
  a0:	d9 9a       	sbi	0x1b, 1	; 27
			
		}
		 if ((PIND & (1<<intermediate)))
  a2:	81 9b       	sbis	0x10, 1	; 16
  a4:	07 c0       	rjmp	.+14     	; 0xb4 <main+0x3c>
		{
			PORTA =0; 
  a6:	1b ba       	out	0x1b, r1	; 27
			PORTA |= (1<<PA0);  //illuminate green led
  a8:	d8 9a       	sbi	0x1b, 0	; 27
			PWM_config(128); //54% duty cycle
  aa:	80 e8       	ldi	r24, 0x80	; 128
  ac:	0e 94 36 00 	call	0x6c	; 0x6c <PWM_config>
			PORTB |= (1<<PB1); //motor is on
  b0:	c1 9a       	sbi	0x18, 1	; 24
	        PORTB &= (~(1<<PB2));
  b2:	c2 98       	cbi	0x18, 2	; 24
			
			
		}
	    if ((PIND & (1<<high7)))
  b4:	82 9b       	sbis	0x10, 2	; 16
  b6:	ec cf       	rjmp	.-40     	; 0x90 <main+0x18>
		{
			PORTA =0; 
  b8:	1b ba       	out	0x1b, r1	; 27
			PORTA |= (1<<PA2);	//illuminate red led
  ba:	da 9a       	sbi	0x1b, 2	; 27
			PWM_config(250);  //100% duty cycle
  bc:	8a ef       	ldi	r24, 0xFA	; 250
  be:	0e 94 36 00 	call	0x6c	; 0x6c <PWM_config>
			PORTB |= (1<<PB1); //motor is on
  c2:	c1 9a       	sbi	0x18, 1	; 24
	        PORTB &= (~(1<<PB2));
  c4:	c2 98       	cbi	0x18, 2	; 24
  c6:	e4 cf       	rjmp	.-56     	; 0x90 <main+0x18>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
