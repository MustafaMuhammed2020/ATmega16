
AVRGCC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000118  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000090  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000874  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000002f  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000ab  00000000  00000000  000008c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000074  00000000  00000000  0000096e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001bf  00000000  00000000  000009e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000030  00000000  00000000  00000ba4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000b4  00000000  00000000  00000bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000001f  00000000  00000000  00000c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000001e  00000000  00000000  00000ca7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3c 00 	call	0x78	; 0x78 <main>
  64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <PWM_Timer0_Init>:
#define high PA2
#define stop PA3
void PWM_Timer0_Init(unsigned char set_duty_cycle)
{
	
	TCNT0=0;                       //set the initial value of timer0
  6c:	12 be       	out	0x32, r1	; 50
	OCR0=set_duty_cycle;            //the duty cycle value
  6e:	8c bf       	out	0x3c, r24	; 60
	DDRB  = DDRB | (1<<PB3);         //the PWM pin set as output
  70:	bb 9a       	sbi	0x17, 3	; 23
	TCCR0=(1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS01);
  72:	8a e6       	ldi	r24, 0x6A	; 106
  74:	83 bf       	out	0x33, r24	; 51
}
  76:	08 95       	ret

00000078 <main>:
int main(void)
{
    DDRA=0xf0;   //the first four pins of portA as inputs
  78:	80 ef       	ldi	r24, 0xF0	; 240
  7a:	8a bb       	out	0x1a, r24	; 26
	DDRC|=(1<<PC0);
  7c:	a0 9a       	sbi	0x14, 0	; 20
	DDRC|=(1<<PC1);
  7e:	a1 9a       	sbi	0x14, 1	; 20
	PORTC|=((1<<PC0));
  80:	a8 9a       	sbi	0x15, 0	; 21
	PORTC|=(1<<PC1);  //the motor stops at first
  82:	a9 9a       	sbi	0x15, 1	; 21
	while(1)
	{
		if (PINA&(1<<slow))
  84:	c8 9b       	sbis	0x19, 0	; 25
  86:	06 c0       	rjmp	.+12     	; 0x94 <main+0x1c>
	{
		PORTC|=(1<<PC1);
  88:	a9 9a       	sbi	0x15, 1	; 21
		PORTC&=~(1<<PC0);
  8a:	a8 98       	cbi	0x15, 0	; 21
		PWM_Timer0_Init(64);
  8c:	80 e4       	ldi	r24, 0x40	; 64
  8e:	0e 94 36 00 	call	0x6c	; 0x6c <PWM_Timer0_Init>
  92:	f8 cf       	rjmp	.-16     	; 0x84 <main+0xc>
	}
	else if (PINA&(1<<meduim))
  94:	c9 9b       	sbis	0x19, 1	; 25
  96:	06 c0       	rjmp	.+12     	; 0xa4 <main+0x2c>
	{
		PORTC|=(1<<PC1);
  98:	a9 9a       	sbi	0x15, 1	; 21
		PORTC&=~(1<<PC0);
  9a:	a8 98       	cbi	0x15, 0	; 21
		PWM_Timer0_Init(153);
  9c:	89 e9       	ldi	r24, 0x99	; 153
  9e:	0e 94 36 00 	call	0x6c	; 0x6c <PWM_Timer0_Init>
  a2:	f0 cf       	rjmp	.-32     	; 0x84 <main+0xc>
	}
	else if (PINA&(1<<high))
  a4:	ca 9b       	sbis	0x19, 2	; 25
  a6:	06 c0       	rjmp	.+12     	; 0xb4 <main+0x3c>
	{
		PORTC|=(1<<PC1);
  a8:	a9 9a       	sbi	0x15, 1	; 21
		PORTC&=~(1<<PC0);
  aa:	a8 98       	cbi	0x15, 0	; 21
		PWM_Timer0_Init(255);
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	0e 94 36 00 	call	0x6c	; 0x6c <PWM_Timer0_Init>
  b2:	e8 cf       	rjmp	.-48     	; 0x84 <main+0xc>
	}
	else if (PINA&(1<<stop))
  b4:	cb 9b       	sbis	0x19, 3	; 25
  b6:	e6 cf       	rjmp	.-52     	; 0x84 <main+0xc>
	{
		PORTC|=(1<<PC1);
  b8:	a9 9a       	sbi	0x15, 1	; 21
		PORTC|=(1<<PC0);
  ba:	a8 9a       	sbi	0x15, 0	; 21
  bc:	e3 cf       	rjmp	.-58     	; 0x84 <main+0xc>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
