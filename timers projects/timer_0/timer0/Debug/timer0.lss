
timer0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  00000146  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000004e  00000000  00000000  000008c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000cb  00000000  00000000  00000912  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000085  00000000  00000000  000009dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000166  00000000  00000000  00000a62  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000040  00000000  00000000  00000bc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000c1  00000000  00000000  00000c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000001e  00000000  00000000  00000cc9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  74:	0c 94 67 00 	jmp	0xce	; 0xce <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_9>:
//global interrupt variable for overflows
unsigned char number_of_ovs;

//interrupt service routine
ISR(TIMER0_OVF_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
	number_of_ovs++;
  8a:	80 91 60 00 	lds	r24, 0x0060
  8e:	8f 5f       	subi	r24, 0xFF	; 255
  90:	80 93 60 00 	sts	0x0060, r24
	if (number_of_ovs == 2)  //after two overflows
  94:	82 30       	cpi	r24, 0x02	; 2
  96:	31 f4       	brne	.+12     	; 0xa4 <__vector_9+0x28>
	{
		PORTC ^= (1<<PC0);  //toggle the pin state
  98:	95 b3       	in	r25, 0x15	; 21
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	89 27       	eor	r24, r25
  9e:	85 bb       	out	0x15, r24	; 21
		number_of_ovs=0;   //clear the overflows counter to start another cycle
  a0:	10 92 60 00 	sts	0x0060, r1
	}
}
  a4:	9f 91       	pop	r25
  a6:	8f 91       	pop	r24
  a8:	0f 90       	pop	r0
  aa:	0f be       	out	0x3f, r0	; 63
  ac:	0f 90       	pop	r0
  ae:	1f 90       	pop	r1
  b0:	18 95       	reti

000000b2 <timer0_config>:

//configuration function for timer0
void timer0_config (void)
{
	TIMSK |= (1<<TOIE0); //enables timer0 overflow interrupt
  b2:	89 b7       	in	r24, 0x39	; 57
  b4:	81 60       	ori	r24, 0x01	; 1
  b6:	89 bf       	out	0x39, r24	; 57
	TCNT0 =0;           //initial value of timer0 is 0
  b8:	12 be       	out	0x32, r1	; 50
	TCCR0 |= ((1<<FOC0) | (1<<CS00) | (1<<CS02));  //normal mode with FCPU/1024 prescaller
  ba:	83 b7       	in	r24, 0x33	; 51
  bc:	85 68       	ori	r24, 0x85	; 133
  be:	83 bf       	out	0x33, r24	; 51
}	
  c0:	08 95       	ret

000000c2 <main>:

int main(void)
{
	//registers direction and initial values
	DDRC |= (1<<PC0);  //the led is output pin
  c2:	a0 9a       	sbi	0x14, 0	; 20
	PORTC &= (~(1<<PC0));  //led is off
  c4:	a8 98       	cbi	0x15, 0	; 21
	sei();           //enable global interrupts
  c6:	78 94       	sei
	timer0_config();  //start timer 
  c8:	0e 94 59 00 	call	0xb2	; 0xb2 <timer0_config>
  cc:	ff cf       	rjmp	.-2      	; 0xcc <main+0xa>

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
